//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace NiHuaWoCaiGameClient.GameServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="GameExample", ConfigurationName="GameServiceReference.IGameService", CallbackContract=typeof(NiHuaWoCaiGameClient.GameServiceReference.IGameServiceCallback))]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/Login")]
        void Login(string userName, string passWord, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/Login")]
        System.Threading.Tasks.Task LoginAsync(string userName, string passWord, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/Logout")]
        void Logout(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/Logout")]
        System.Threading.Tasks.Task LogoutAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/SitDown")]
        void SitDown(string userName, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/SitDown")]
        System.Threading.Tasks.Task SitDownAsync(string userName, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/GetUp")]
        void GetUp(int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/GetUp")]
        System.Threading.Tasks.Task GetUpAsync(int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/Start")]
        void Start(string userName, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/Start")]
        System.Threading.Tasks.Task StartAsync(string userName, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/Talk")]
        void Talk(int index, string userName, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/Talk")]
        System.Threading.Tasks.Task TalkAsync(int index, string userName, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/sendPoints")]
        void sendPoints(int[][] points, string color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/sendPoints")]
        System.Threading.Tasks.Task sendPointsAsync(int[][] points, string color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/sendButtonInfo")]
        void sendButtonInfo(string color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/sendButtonInfo")]
        System.Threading.Tasks.Task sendButtonInfoAsync(string color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/sendQuestion")]
        void sendQuestion(int id, int presentId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/sendQuestion")]
        System.Threading.Tasks.Task sendQuestionAsync(int id, int presentId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/changeQuestionRole")]
        void changeQuestionRole(int nextId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/changeQuestionRole")]
        System.Threading.Tasks.Task changeQuestionRoleAsync(int nextId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/Win")]
        void Win();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/Win")]
        System.Threading.Tasks.Task WinAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/play")]
        void play();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/play")]
        System.Threading.Tasks.Task playAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/stop")]
        void stop();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/stop")]
        System.Threading.Tasks.Task stopAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/ShowLogin")]
        void ShowLogin(string loginUserName, int id, int maxTables);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/ShowLogout")]
        void ShowLogout(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/ShowSitDown")]
        void ShowSitDown(string userName, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/ShowGetUp")]
        void ShowGetUp(string userName, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/ShowStart")]
        void ShowStart(int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/ShowTalk")]
        void ShowTalk(string userName, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/GameStart")]
        void GameStart();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/ShowWin")]
        void ShowWin(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/UpdateTablesInfo")]
        void UpdateTablesInfo(string tablesInfo, int userCount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/showSendPoints")]
        void showSendPoints(int[][] points, string color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/showSendButtonInfo")]
        void showSendButtonInfo(string color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/showSendQuestion")]
        void showSendQuestion(string s);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/showChangeQuestionRole")]
        void showChangeQuestionRole(string userName, int nextId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/showPlay")]
        void showPlay();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameExample/IGameService/showStop")]
        void showStop();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : NiHuaWoCaiGameClient.GameServiceReference.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.DuplexClientBase<NiHuaWoCaiGameClient.GameServiceReference.IGameService>, NiHuaWoCaiGameClient.GameServiceReference.IGameService {
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login(string userName, string passWord, int id) {
            base.Channel.Login(userName, passWord, id);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string userName, string passWord, int id) {
            return base.Channel.LoginAsync(userName, passWord, id);
        }
        
        public void Logout(string userName) {
            base.Channel.Logout(userName);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string userName) {
            return base.Channel.LogoutAsync(userName);
        }
        
        public void SitDown(string userName, int index, int side) {
            base.Channel.SitDown(userName, index, side);
        }
        
        public System.Threading.Tasks.Task SitDownAsync(string userName, int index, int side) {
            return base.Channel.SitDownAsync(userName, index, side);
        }
        
        public void GetUp(int index, int side) {
            base.Channel.GetUp(index, side);
        }
        
        public System.Threading.Tasks.Task GetUpAsync(int index, int side) {
            return base.Channel.GetUpAsync(index, side);
        }
        
        public void Start(string userName, int index, int side) {
            base.Channel.Start(userName, index, side);
        }
        
        public System.Threading.Tasks.Task StartAsync(string userName, int index, int side) {
            return base.Channel.StartAsync(userName, index, side);
        }
        
        public void Talk(int index, string userName, string message) {
            base.Channel.Talk(index, userName, message);
        }
        
        public System.Threading.Tasks.Task TalkAsync(int index, string userName, string message) {
            return base.Channel.TalkAsync(index, userName, message);
        }
        
        public void sendPoints(int[][] points, string color) {
            base.Channel.sendPoints(points, color);
        }
        
        public System.Threading.Tasks.Task sendPointsAsync(int[][] points, string color) {
            return base.Channel.sendPointsAsync(points, color);
        }
        
        public void sendButtonInfo(string color) {
            base.Channel.sendButtonInfo(color);
        }
        
        public System.Threading.Tasks.Task sendButtonInfoAsync(string color) {
            return base.Channel.sendButtonInfoAsync(color);
        }
        
        public void sendQuestion(int id, int presentId) {
            base.Channel.sendQuestion(id, presentId);
        }
        
        public System.Threading.Tasks.Task sendQuestionAsync(int id, int presentId) {
            return base.Channel.sendQuestionAsync(id, presentId);
        }
        
        public void changeQuestionRole(int nextId) {
            base.Channel.changeQuestionRole(nextId);
        }
        
        public System.Threading.Tasks.Task changeQuestionRoleAsync(int nextId) {
            return base.Channel.changeQuestionRoleAsync(nextId);
        }
        
        public void Win() {
            base.Channel.Win();
        }
        
        public System.Threading.Tasks.Task WinAsync() {
            return base.Channel.WinAsync();
        }
        
        public void play() {
            base.Channel.play();
        }
        
        public System.Threading.Tasks.Task playAsync() {
            return base.Channel.playAsync();
        }
        
        public void stop() {
            base.Channel.stop();
        }
        
        public System.Threading.Tasks.Task stopAsync() {
            return base.Channel.stopAsync();
        }
    }
}
